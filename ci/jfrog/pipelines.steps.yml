pipelines:
  - name: backapp_mvn
    configuration:
      environmentVariables:
        readOnly:
          virtualRepo: urs-mvn

    steps:
      - name: build_backapp_mvn
        type: MvnBuild
        configuration:
          environmentVariables:
            JFROG_CLI_BUILD_URL: "${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/build_${pipeline_name}?branch=${res_src_code_backapp_mvn_branchName}"
            JFROG_CLI_LOG_LEVEL: DEBUG
          mvnCommand: clean package
          sourceLocation: src
          resolverSnapshotRepo: urs-mvn
          resolverReleaseRepo: urs-mvn
          deployerSnapshotRepo: urs-mvn
          deployerReleaseRepo: urs-mvn
          forceXrayScan: false
          autoPublishBuildInfo: true
          inputResources:
            - name: src_code_backapp_mvn
          outputResources:
            - name: bi_backapp_mvn
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - ls -l ${res_src_code_backapp_mvn_resourcePath}/src
            - jfrog rt c show
          onFailure:
            - echo "Not cool"
          onSuccess:
            - echo "Yahoo"
            - add_run_variables runVarAppVersion=`sed -n "s/[[:space:]]*<version>\(.*\)<\/version>/\1/p" ${res_src_code_backapp_mvn_resourcePath}/src/pom.xml`
            - echo $runVarAppVersion

      - name: scan_backapp_mvn
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_backapp_mvn
              trigger: true

      - name: bi_backapp_mvn_promoted_staging
        type: PromoteBuild
        configuration:
          targetRepository: urs-mvn-rc-local
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: false
          inputResources:
            - name: bi_backapp_mvn
              trigger: true
          inputSteps:
            - name: scan_backapp_mvn
          outputResources:
            - name: bi_backapp_mvn_promoted_staging
            - name: pb_backapp_mvn
        execution:  
          onSuccess:
            - write_output pb_backapp_mvn appVersion=${runVarAppVersion}

  - name: backapp_mvn_docker
    steps:
      - name: backapp_mvn_docker
        type: DockerBuild
        configuration:
          environmentVariables:
            JFROG_CLI_BUILD_URL: "${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/build_${pipeline_name}?branch=${res_src_code_backapp_mvn_branchName}"
            JFROG_CLI_LOG_LEVEL: INFO
          affinityGroup: together
          dockerFileName: Dockerfile
          dockerFileLocation: ci/docker/
          dockerImageName: swampup301.jfrog.io/urs-docker/backapp-mvn-docker
          dockerImageTag: ${res_pb_backapp_mvn_appVersion}
          # dockerOptions: >-
          #   --build-arg
          #   JFROG_CLI_BUILD_URL=${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/${pipeline_name}/${run_number}/build_${pipeline_name}?branch=${res_src_dockerfile_backapp_mvn_branchName}
          # inputSteps:
          #   - name: setup_env
          inputResources:
            - name: pb_backapp_mvn
            - name: src_dockerfile_backapp_mvn
            - name: fs_backapp_mvn
          integrations:
            - name: artifactory_eu
            - name: artifactory_docker
        execution:
          onStart:
            - 'ls -la ${res_fs_backapp_mvn_resourcePath}'
            - 'echo ${res_src_dockerfile_backapp_mvn_resourcePath}'
            - 'ls -la  ${res_src_dockerfile_backapp_mvn_resourcePath}'
            - >-
              cp
              ${res_fs_backapp_mvn_resourcePath}/multi-module-application-${runVarAppVersion}.jar
              ${res_src_dockerfile_backapp_mvn_resourcePath}/complete/CI/Docker/multi-module-application.jar
            - >-
              add_run_variables
              runVarGitCommit=${res_src_dockerfile_backapp_mvn_commitSha}
            - >-
              add_run_variables
              runBranchName=${res_src_dockerfile_backapp_mvn_branchName}
      - name: publish_backapp_mvn_docker
        type: DockerPush
        configuration:
          environmentVariables:
            JFROG_CLI_BUILD_URL: "${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/bi_backapp_mvn_docker/${run_number}/setup_env?branch=${runBranchName}"
            JFROG_CLI_LOG_LEVEL: INFO
          affinityGroup: together
          targetRepository: urs-docker-dev-local
          autoPublishBuildInfo: true
          inputSteps:
            - name: backapp_mvn_docker
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_backapp_mvn_docker
        execution:
          # onStart:
          #   - >-
          #     export
          #     JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/bi_backapp_mvn_docker/${run_number}/setup_env?branch=${runBranchName}"
          onSuccess:
            - >-
              jfrog rt sp
              --build=${res_bi_backapp_mvn_docker_buildName}/${run_number}
              urs-docker-dev-local/backapp-mvn-docker/${runVarAppVersion}/
              "app.version=${runVarAppVersion};app.commit.sha=${runVarAppCommitSHA};dockerfile.commit.sha=${runVarGitCommit};app.name=ninja"
      - name: scan_backapp_mvn_docker
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_backapp_mvn_docker
              trigger: true
      - name: bi_backapp_mvn_docker_promoted
        type: PromoteBuild
        configuration:
          targetRepository: urs-docker-rc-local
          includeDependencies: false
          status: SCAN_OK
          comment: Xray scan OK
          copy: false
          inputSteps:
            - name: scan_backapp_mvn_docker
          inputResources:
            - name: bi_backapp_mvn_docker
          outputResources:
            - name: bi_backapp_mvn_docker_promoted
        execution:
          onSuccess:
            - 'write_output pb_backapp_mvn_container newTag=${runVarAppVersion}'
            - 'write_output pb_backapp_mvn_container mvnBINumber=${runVarBINumber}'