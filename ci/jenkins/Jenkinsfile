pipeline {
    agent {
        kubernetes {
            yaml """\
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                some-label: some-label-value
            spec:
              containers:
              - name: maven
                image: maven:alpine
                command:
                - cat
                tty: true
              - name: busybox
                image: busybox
                command:
                - cat
                tty: true
            """.stripIndent()
        }
    }
/*    
    stages {
        stage('Run maven') {
            steps {
                container('maven') {
                    sh 'mvn -version'
                }
            }
        }
    }
*/
    environment {
        ARTY_CREDS=credentials('jenkins_rt')
//        ADM_CREDS=credentials('admin_art')
        ART_ID="artifactory-eu"
        JAVA_HOME = '/usr/lib/jvm/java-1.8-openjdk/'
        MAVEN_HOME = '/usr/share/maven'
    }

    parameters {
        string(name: 'JPD_URL', defaultValue: 'http://artifactory-eu-yannc4-0.soleng-emea-staging.jfrog.team', description: '')
        string(name: 'PROMOTE_REPO', defaultValue: 'ninja-mvn-rc-local', description: '')
        booleanParam(name: 'FAIL_BUILD', defaultValue: false, description: 'Xray scan')
    }
    
    stages {

        stage ('Get Source code') {
            steps {
                git branch: 'demo2', url: "https://github.com/cyan21/gs-multi-module.git"
            
                sh "ls -l && mv complete/pom.xml.test complete/pom.xml && cat complete/pom.xml"
                sh "mv complete/application/pom.xml.test complete/application/pom.xml && cat complete/application/pom.xml"
                sh "mv complete/library/pom.xml.test complete/library/pom.xml && cat complete/library/pom.xml"

                sh '''
                   echo "{\\"names\\":[\\"${JOB_NAME}\\"]}" > payload.json && cat payload.json
                '''   
            }
        }
  
        stage ('Artifactory configuration') {
            steps {
                container('maven') {

                    rtServer (
                        id: env.ART_ID,
                        url: "${params.JPD_URL}/artifactory",
                        credentialsId: 'jenkins_rt'
                    )
    
                    rtMavenDeployer (
                        id: "MAVEN_DEPLOYER",
                        serverId: env.ART_ID,
                        releaseRepo: "ninja-mvn",
                        snapshotRepo: "ninja-mvn"
                    )
    
                    rtMavenResolver (
                        id: "MAVEN_RESOLVER",
                        serverId: env.ART_ID,
                        releaseRepo: "ninja-mvn",
                        snapshotRepo: "ninja-mvn"
                    )
                    
                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*private*', 'internal-*', 'ADM*'],
     
                        // buildName: 'my-build',
                        // buildNumber: '20'
                    )
                                        
                    // Xray : reference  build info
                    // sh "curl -XPOST -u${ADM_CREDS_USR}:${ADM_CREDS_PSW}  -H \"Content-Type: application/json\" -d @payload.json ${JPD_URL}/xray/api/v1/binMgr/builds"
                }
            }
        }

        stage ('Build Maven project') {
            steps {
                container('maven') {
                    rtMavenRun (
                        pom: 'complete/pom.xml',
                        goals: 'clean package',
                        deployerId: "MAVEN_DEPLOYER",
                        resolverId: "MAVEN_RESOLVER"
                    )
                }
            }
        }

        stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: env.ART_ID
                )
            }
        }

        stage ('Xray scan') {
            steps {
                xrayScan (
                    serverId: env.ART_ID,
                    failBuild: params.FAIL_BUILD
                )
            }
        }
      
        stage ('Promotion') {
            steps {
                rtPromote (
                    //Mandatory parameter
                    serverId: env.ART_ID,
                    targetRepo: params.PROMOTE_REPO,

                    //Optional parameters
                    comment: 'passed Xray scan',
                    status: 'XRAY_OK',
                    includeDependencies: false,
                    failFast: true,
                    copy: false
                )
            }
        }
    }
}