pipeline {
    agent {
        kubernetes {
            yaml """\
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                some-label: some-label-value
            spec:
              containers:
              - name: maven
                image: maven:alpine
                command:
                - cat
                tty: true
              - name: docker
                image: docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
                - name: docker-sock
                  hostPath:
                    path: /var/run/docker.sock
            """.stripIndent()
        }
    }

    environment {
        ARTY_CREDS=credentials('jenkins')
        ART_ID="artifactory-eu"
        JAVA_HOME = '/usr/lib/jvm/java-1.8-openjdk/'
        MAVEN_HOME = '/usr/share/maven'
    }

    parameters {
        string(name: 'JPD_URL', defaultValue: 'swampup301.jfrog.io', description: '')
        string(name: 'MVN_REPO', defaultValue: 'urs-mvn', description: '')
        string(name: 'DOCKER_REPO', defaultValue: 'urs-docker', description: '')
        string(name: 'WEBHOOK_PASS', defaultValue: 'Chaysinh!21', description: '')
        string(name: 'WEBHOOK_URL', defaultValue: 'https://swampup301-pipelines-api.jfrog.io/v1/projectIntegrations/32/hook', description: '')
//        booleanParam(name: 'FAIL_BUILD', defaultValue: false, description: 'Xray scan')
    }
    
    stages {

        stage ('Maven Build') {
            steps {
                container('maven') {

                    git branch: 'demo2', url: "https://github.com/cyan21/gs-multi-module.git"

                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: 'jenkins'
                    )
    
                    rtMavenDeployer (
                        id: "MAVEN_DEPLOYER",
                        serverId: env.ART_ID,
                        releaseRepo: "urs-mvn",
                        snapshotRepo: "urs-mvn"
                    )
    
                    rtMavenResolver (
                        id: "MAVEN_RESOLVER",
                        serverId: env.ART_ID,
                        releaseRepo: "urs-mvn",
                        snapshotRepo: "urs-mvn"
                    )
                    
                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*private*', 'internal-*', 'ADM*'],
     
                        buildName: 'jenkins-maven',
                        // buildNumber: '20'
                    )
                                        
                    rtMavenRun (
                        pom: 'complete/pom.xml',
                        goals: 'clean package',
                        deployerId: "MAVEN_DEPLOYER",
                        resolverId: "MAVEN_RESOLVER"
                    )
                    
                    rtPublishBuildInfo (
                        serverId: env.ART_ID
                    )
                }
            }
        }

        stage ('Docker Build & Push') {
            steps {
                container('docker') {

                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: 'jenkins'
                    )

                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*private*', 'internal-*', 'ADM*'],
                        buildName: 'jenkins-maven',
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    rtDownload (
                        serverId: env.ART_ID,
                        spec: '''{
                              "files": [
                                {
                                  "pattern": "${MVN_REPO}/com/example/multi-module-application/1.4.1/multi-module-application-1.4.1.jar",
                                  "target": "multi-module-application.jar"
                                }
                              ]
                        }''',
                        module: 'webapp',
                        buildName: 'jenkins-docker',
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    sh '''
                        # Java is required by the Artifactory Jenkins plugin
                        apk add curl openjdk11
                        curl -O https://raw.githubusercontent.com/cyan21/gs-multi-module/soleng-stg/complete/CI/Docker/Dockerfile
                        docker build -t ${JPD_URL}/${DOCKER_REPO}/jenkins-javapp:1.0.0 .
                        docker images
                    '''
                
                    rtDockerPush(
                        serverId: env.ART_ID,
                        image: "${params.JPD_URL}/${params.DOCKER_REPO}/jenkins-javapp:1.0.0",
                        targetRepo: 'urs-docker-dev-local',
                        properties: 'project-name=docker1;status=stable',
                        // If the build name and build number are not set here, the current job name and number will be used:
                        buildName: 'jenkins-docker',
                        buildNumber: env.BUILD_NUMBER
                    )
 
                    rtPublishBuildInfo (
                        serverId: env.ART_ID,
                        buildName: 'jenkins-docker',
                        buildNumber: env.BUILD_NUMBER
                    )
                }
            } // end steps
        } // end stage
            
        stage('Call to JFrog Pipelines for deployment') {
            steps {
                sh '''
                    curl -XPOST -H "authorization: ${WEBHOOK_PASS}" -d "{ \"jenkins_job_name\" : \"$JOB_NAME\", \"run_number\": \"$BUILD_NUMBER\" }" ${WEBHOOK_URL}                  
                 '''
            } // end steps
        } // end stage 
        
    }
}
